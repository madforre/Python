소켓 - 통신

    소켓은 다른 소켓과 서로 데이터를 주고받을 수 있다.

    프로그램마다 소켓이 들어있음.

    즉 프로그램들끼리 통신이 가능함.

    가장 큰 특징은, 다른 컴퓨터와 네트워크가 쭉쭉 연결되어있으면
    다른 컴퓨터에서 실행한 프로그램의 소켓과도 통신이 가능하게 해준다는 것.

    소켓은 유닉스,리눅스 기준에서 파일 그 자체이다.
    파일을 생성해서 필요한 정보를 저장해놓고 사용한다.

    ls -al 치면 d가 디렉토리 s가 소켓을 뜻함.

    소켓은 주소정보를 담고 있다.
    한 컴퓨터 내에서 현재 돌고 있는 프로세스를 구분해준다.

    * 소켓으로 통신을 하려면 어떤 프로세스인지 알고 찾아가야 한다.

        그걸 알려주는 것이 포트번호.

        또 필요한 것은 ip주소.

        즉 소켓은 ip주소와 포트번호, 이 두가지 정보를 가지고 있다.

    데이터를 담아서 어디든 보낼 수 있음.

TCP / UDP 프로토콜

    TCP - 연결형 통신 ( 소켓끼리 연결을 하고, 한번 연결하면 연결한 상태를 유지한다. )

        중간에 데이터가 빠진 부분이 있으면 빠진걸 다시 보내줌. 즉 신뢰성 있는 프로토콜이다.

        three way handshake 간다?->응 와->감

            * 중요한 파일전송 (중간에 하나라도 빠지면 안되는 것들 전송할 때 쓰인다.)에 쓰인다.

    UDP - 비연결형 통신 ( 소켓이 있으면 데이터를 한번보낸다. 그러면 끝. 잘못받았는지 받았는지는 관심 없음.)

        장점은 속도가 빠르다. 하지만 잘 받았는지 안받았는지 신경 안쓴다.
        데이터를 담아서 그냥 보내면 끝이다.

            * 스트리밍 , 전화에 쓰인다. ( 데이터가 중간에 유실되더라도 큰 지장이 없음. )


socket 메소드 안의 메소드들 connect, send, recv 등을 사용하여 소켓 통신하도록 프로그래밍.

connect는 클라이언트. 서버에서는 소켓을 만들어서 accept를 해야함

사용하려면 import socket해주자. 기본 모듈임.


서버 측

    bind -> listen -> accept

클라이언트 측



패킷?

    패킷(packet)은 사전적인 의미로는 '한 다발, 한 묶음'을 뜻하는 말로 통신, 네트워크에서는 한 번에 전송하는 정보의 단위를 일컫습니다.

쓰래드

    하나의 프로세스에서 두가지 작업을 동시에 하는 것이다. 여러개의 처리를 해주는 것이다.


함수 정의

    def 로 정의하도록 한다.

---------------------------------------------------------

라즈베리 파이 - 단일 보드 컴퓨터

CPU(Central Processing Unit) - 머리, 두뇌
      현대 CPU는 1960년대와 달리 축전기, 저항기, 트랜지스터 회로가
      극소화 되어있다. 광학적인 방법으로 더 작고 더 많이 회로를 새겨놓았음.
      몇백만 개를 한 개로 만들 수 있는 것이다.
      프로그램을 실행한다. CPU는 항상 다음에 무엇을 하지? 라고 물어본다.
      처리능력이 매우 뛰어나다.

메인 메모리 - 명령이 저장되어 있음.
             메인메모리는 CPU가 필요로하는 명령을 제공한다.
             CPU에게 명령을 전달한다.
             빠르게 작동하며 프로그램을 저장한다.
             속도는 매우 빠르지만 컴퓨터를 종료하면 사라지는 휘발성 메모리.

CPU가 새로운 명령이 필요하면 메인 메모리한테 어디에 명령이 있는지 물어본다.
소프트웨어를 통해 CPU를 제어한다.

마더보드 - 모든 부품을 연결한다. (메모리, CPU, 하드 드라이브 등등 끼워넣어서 사용한다.)
            모든 부품을 연결해줌.

보조 기억장치 - ex) 하드드라이브 SSD HDD, USB
               영구적으로 데이터를 저장한다.
               메인메모리와 다른 점?
               메인 메모리는 매우 빠르다.
               하지만 전원을 끄면 정보가 사라진다.
               워드 파일, 텍스트 파일등을 기록해 두려면 오래된 곳에 저장해서 보관해야 한다.
               보조 저장소가 그 역할을 한다. 전원이 꺼져도 영구적으로 메모리를 저장한다.

우리 프로그래머들은 메인 메모리에 서 있다.
코드를 작성하면 메인 메모리가 CPU에 전달하여 명령을 처리한다.

각각의 관계

  CPU는 계속해서 다음에 무엇을 할지 물어 봅니다.
  이것에 대한 답변은 사람이 하며, 답변들의 목록이나 순차적으로 진행되어야 할 사항들을
  파이썬 언어로 작성한 뒤 보조 기억장치에 저장합니다. CPU의 질문에 답변을 해야 하는 순간이 오면
  메인 메모리에 해당 내용을 로드 합니다. 이 과정에서 2진수로 만들어져 있는 기계어로 마법처럼
  변환이 되며 이는 컴퓨터가 이해할 수 있는 언어로 전달 되게 됩니다.
  그 후 내부적으로는 1초에 수십억번(CPU에 성능에 따라 달라집니다)에 걸쳐
  질문과 답변이 이루어 지게 됩니다.

파이썬은 Monty Python's Flying이라는 서커스에서 영감을 받아 지은 이름이다.
귀도 반 로섬이 20년전에 만듦. 강력하고 다가가기 쉬운, 재밌는 프로그래밍 언어를
만들고 싶었던 귀도 반 로섬의 마음을 잘 보여주는 네이밍이다.
배우기 쉽고 간결하고 강력하다.

------------------------------------------------

파이썬의 예약어

Reserved Words - 예약어

  일종의 약속과 같다.

  False, class, return, is, finally, None, if, for, lambda, continue
  True, def, from, while, nonlocal, and, del, global, not, with, as,
  elif, try, or, yield, assert, else, import, pass, break, excpet,
  in, raise

  예약어는 약속된 단어이기 때문에 변수의 이름이나 식별자로 사용할 수 없습니다.

Sentences or Lines - 문장/줄

  x = 2       Assignment statement 대입문
  x = x + 2   Assignment with expression ( 대입문 + 표현식 )
  print(x)    Print statement ( 출력문 )

  변수 연산자 상수 함수로 구성되어있다.

프로그래밍 문단

  Python Scripts - 스크립트

    대부분의 프로그램은 길기 떄문에 파일에 코드를 적고
    파이썬이 파일에 있는 명령을 실행한다.
    파일 이름에 .py를 붙여 파이썬을 썼다는 것을 표시
    파이썬에 스크립트를 주는 것과 같음.
    코드가 길어질 경우에는 스크립트 방식이 효과적이다.
    파일을 보조 기억장치에 저장 한 뒤 한 번에 실행시켜 처리한다.

  Interactive - 상호대화식

    파이썬에 한 줄을 입력하면 바로 반응.
    코드가 생각한 대로 작동하는지 테스트하기 좋다.
    3~4줄의 코드를 실험하기 좋음.
    커맨드라인에서 한줄씩 실행하는 방법은 상호대화식이라고 한다.
    즉각적이 ㄴ결과 호가인에 유리하다.

프로그램 단계 / 흐름

- 순차문 : 레시피나 설명문과 같이 진행 순서를 가짐. 순서대로 진행됨
          (Sequential Steps)

- 조건문 : 건너뛸 수 있음
          (Conditional Steps)

- 반복문 : 반복되어 실행
          (Repeated Steps)

* 들여쓰기가 없는 부분은 순차적으로 실행된다.

---------------------------------

Constants - 상수 (변하지 않는 고정 값)

Variables - 변수 (메모리 안의 이름이 지정된 장소에 데이터를 저장할 수 있음)
            값을 원하는대로 변경할 수 있다.

Python Variable Name Rules

  파이썬과 대화할 때 밑줄을 쓰기 떄문에 되도록 변수 이름을 밑줄로 시작하지 않습니다.
  첫 글자 다음으로 문자, 숫자, 밑줄이 올 수 있습니다.

  * 대소문자로 변수를 구별하지 말 것!!! 정말 안좋은 생각이다. 숫자로 시작해도 안좋다.
    #이나 .으로 시작해도 안좋음.
    문자로 시작하고 다음에 문자, 숫자, 밑줄 변수 이름을 정합니다.

Mnemonic Variable Names (연상기호, 기억을 돕는 변수 이름)

  변수 이름은 프로그래머 마음대로 아무 이름으로 지정해도 된다. - 단, 모범 기준을 따르자.
  변수 값과 연관 지어 변수 이름을 지정 (연상 기호)
  단점 : 변수 이름이 키워드인 것 같아 보일 수 있기 때문에 초급자는 헷갈릴 수 있음.

Sentences or Lines

  Variable / Operator / Constant / Reserved Word로 구성되어 있음.

-------------------------------------

Numeric Expressions - 숫자 표현식(연산자)

  + Addition
  - subtraction
  * Multiplication
  / Division
  ** Power
  % Remainder (It's also called the modulo operator.)

--------------------------------------

Order of Evaluation (값 구하는 순서, 연산자 순위)

  우선순위

  1. 괄호먼저. (Parenthesis)
  2. 그다음 거듭제곱이 우선 (Power)
  3. 그다음 곱하기 나누기 (Multiplication, Division)
  4. 더하기, 빼기 (Addition, Subtraction)

  계산시 Left to Right. 왼쪽에서 오른쪽 법칙 적용.

-------------------------------------

연산자는 똑똑합니다.
값 변수 상수인지에 따라 다른 연산을 합니다.

Traceback은 작동하다가 혼란스러운 부분이 있어 더이상 실행시키지 않는 것입니다.

파이썬은 타입에 민감합니다.

파이썬은 내재된 함수 type을 사용하여 타입을 확인 가능하다.

type()

--------------------------------------

int 정수

float 부동 소수점 수(파이썬에서 숫자를 표현하는 방법이다.)

상수는 int이거나 float일 수 있다.

* 내재된 함수 int나 float를 사용해서 타입을 바꿀 수도 있다.

파이썬 3에서의 정수 나눗셈은 항상 부동 소수점 수를 줍니다.
예측 가능하고, 계산기처럼 작동합니다.

* 파이썬 3.0에서 나눗셈은 부동 소수점 수를 줍니다!

---------------------------------------

고정 소수점(Fixed-point arithmetic) 형식

  이는 소수점의 위치가 특정 위치에 고정되어 있다고 가정하고 실수를 표현하는 방식입니다.
  예를 들어 1230과 1230000이라는 수가 있을 때 소수점의 위치가 1000이라고 하면
  각각의 수는 1.23과 1230을 나타내게 되는 것입니다.

부동 소수점(Floating Point) 형식

  이는 소수점의 위치를 고정하지 않고 그 위치를 나타내는 수를 따로 적어내어
  실수를 표현하는 방식으로 유효숫자를 나타내는 가수부와 소수점의 위치를 나타내는
  지수부로 나누어 표현합니다. 고정 소수점 방식보다 매우 큰 수와 작은 수등
  넓은 범위의 수를 나타낼 수 있는 것이 큰 특징입니다.

  고정 소수점 표현 : 123.456
  부동 소수점 표현 : 0.123456×10³ = 가수×지수

이런게 있다는 걸로 만 알고 있자..
----------------------------------------

String Conversions(문자열 변환)

  int나 float 함수를 사용하여 타입을 바꿀 수 있다.

---------------------------------------

User Input (사용자 입력)

  input() 함수로 멈추고 사용자의 입력값을 받을 수 있음

  input() 함수는 문자열을 반환.

--------------------------------------

주석

파이썬은 # 다음 모든 내용을 무시

-------------------------------------

Indentation (들여쓰기)

  파이썬에서는 들여쓰기가 잘못되면 에러가 뜹니다.
  고로 중요하다.
  띄어쓰기 4번, 스페이스 4번이 들여쓰기 기준이다.

  파이썬은 탭과 들여쓰기를 꼭 구분해줘야 한다.
  에디터의 설정이 탭이 스페이스 4번이 아닐 경우 탭을쓰면 들여쓰기 에러가 뜬다.
  문법 에러 발생. (설정에서 탭의 기능 변경하기에서 스페이스 설정을 해주어야 한다.)

  * 들여쓰기를 통해 어디까지가 if문인지 정할 수 있다.

  블록들은 콜론을 시작으로 내어쓰기가 된 줄을 포함하지 않은 곳 까지 이어진다.

---------------------------------------

Two-way Decisions

  If와 else를 사용한 두 갈래길 조건문

------------------------------------------

들여쓰기가 복잡하다고 생각할 수 있지만, 파이썬은 우아한 언어이다.

* 조건문이 참일 경우 실행할 코드는 들여쓰기를 해야한다.
* 조건문 후에 : (콜론) 을 찍어야 한다.

------------------------------------------

Multi-way Decisions(다중 분기)

  elif라는 예약어를 이용한다.

    if, elif, else 중 하나만 실행된다.
    중요한 것은 질문을 순서에 따라 확인하는 것이다.
    * 첫 번째 질문이 거짓일 때까지 두 번째 질문을 확인하지 않는다.
    else가 없어도 된다. (아무것도 실행 안될 수 있다.)

----------------------------------------------

try / except

  파이썬은 복구하고 싶은 부분에 trackback 에러를 띄우는 경향이 있다.

  에러가 나서 프로그램이 중단될 부분을 안다면 중단되는 것을 원치 않을 것이다.
  프로그래머는 사용자의 입력 값을 보고 코드에서 중단될 수 있는 부분이 어디인지를
  예상할 수 있어야 합니다. 그리고 해결을 할 줄 알아야 합니다.
  이 때 try 와 except를 이용해서 합니다.

  * try부분을 실행하되, 실패하면 except 부분을 실행된다.
    뭔가가 잘못됐을 때 except 블록이 나서서 에러가 떴을 때 진행해야
    할 일을 합니다.

    남용하지 않도록 조심하도록 하자.
    try 블록에 한줄 이상을 넣어 예외가 발생해 실행이 중단되면
    다시 try블록으로 돌아오지 않으므로 주의

    즉 try 블록이 실행되고 에러를 만나면 except 블록으로 이동하는 것이다.

  * 중단될 것 같은 한 줄만 try 블록에 놓는 것이 좋다.

  try / except 와 if / else 를 적절히 섞어 쓸 수도 있다.

  * 사용자가 예외를 발생시킬 만한 값을 입력하면 try / except로 잡을 수 있다!
---------------------------------------------------

들여쓰기는 블록의 시작과 끝을 표시하는 중요한 역할을 한다는 것도 다시한번 기억하자!

-----------------------------------------------------

* 프로그래밍 에서 중요한 것은 같은 작업을 반복하지 않는 것이다.

함수는 하나의 박스라고 생각하시면 됩니다. 프로그래밍에서 함수를 사용하는 이유는
반복적으로 실행되어야하는 코드의 묶음을 프로그래머가 기억하기 쉬운 이름으로 저장하여
반복적으로 호출하고 싶을 때 함수를 사용합니다.

* 재사용 가능한 코드.

def - 정의된 함수를 뜻한다. 역시 콜론으로 끝나고 들여쓰기 된 블럭이 있다.
      내어쓰면 함수가 끝난다.

      실제로 실행되는 코드가 아닌 코드를 기억하는 부분이다.
      즉 저장 단계이다.

      * Stored (and reused) Steps

      def 구문으로 파이썬을 확장시킨 셈.(내장 함수 뿐만 아니라 사용자 정의 함수를 추가한 셈)

* 함수는 반복적으로 호출해야 하는 코드의 묶음을 하나의 블럭으로 만들어 이름을 붙여
  재사용률을 높인 "코드의 묶음"입니다.

------------------------------------------------------

내장함수  max() 문자열의 아스키코드 중 큰걸 찾아준다.
         min() 문자열의 아스키코드 중 작은걸 찾아준다.
         input( ) # ( 괄호 ) 안의 사용자 입력값을 받는 함수
         print("Hello World") # ( 괄호 ) 안의 내용을 출력하는 함수
         float( ) # ( 괄호 ) 안의 값을 float로 변환하는 함수
         int( ) # ( 괄호 ) 안의 값을 int로 변환하는 함수

------------------------------------------------------

자료형 변환

  정수형과 실수형을 표현식에 동시에 사용할 때
  정수는 암시적으로 실수형으로 변환된다.

문자열 변환

  int()와 float()를 문자열에서 정수형으로 변환할 때도 사용할 수 있음

  문자열이 숫자를 포함하지 않으면 에러

------------------------------------------------------

def은 정의하는 것이고
호출(invoke)은 재사용하는 것이다.

return - 함수실행 종료, 함수의 결과값 반환

값을 반환하는 함수를 fruitful 이라고 하는데, 무엇을 생산하기 때문이다.
  fruitful(유익한, 다산의, 비옥한, 열매가 잘 열리는)

되도록 함수는 바로 출력하기보다는 값을 반환하는게 좋다.
함수가 출력하도록 하면 코드가 볼품없어진다.

인자는 함수를 호출할때 전달하는 값을 말하고
매개변수는 함수가 정의된 곳에서 변수처럼 사용하는 것을 말한다.

반환 값을 가질 필요가 없다는 것?
반환 값이 없는 함수는 Void 함수라고 부른다.
* Void (non-fruitful) Functions

--------------------------------------------------------

Repeated Steps - while 루프

* 루프의 종료를 위한 의도적 행위가 없으면 무한히 반복되는루프
  while 루프는 조건문이 거짓이 되기 전까지 계속 실행되기 때문에
  불확정 루프라고 불린다.

  while 반복문에서
    iteration variable 에 아무것도 안하면 무한 루프에 빠질 수 있다.

  break

    break구문을 만나면 그 루프는 끝난다.(위에서 무슨 일이 있었던)
    break는 루프 블럭의 다음으로 이동시킨다.
    break는 루프에서 나가라고 한다.

  continue

    이번 회차의 실행을 멈추고 루프의 제일 위로 올라가서 루프를 계속 실행.

  Break 구문을 가진 Infinite Loops?

    어떤 순간에 빠져나올 수 있기 때문에 무한루프가 아니다.
    루프를 설계하는 유명한 방법 중 하나이다.
    즉 Indefinite Loops 라는 것.(불확정 루프)

  Indefinite Loops

    종료 조건이 복잡해지거나 코드가 길어지고, 코드가 정말 종료될 수 있는지
    불분명해집니다.

  while 루프를 이용해 많은 것을 할 수 있지만
  대부분의 반복문을 만들기 위해 유한 루프라는 것을 사용하게 됩니다.
  (Definite Loops)

-----------------------------------------------------------

for 루프

  유한개의 항목을 가지고 있고 인간의 의도적 행위 없이 주어진 항목들을
  모두 순회하게 되면 종료되는 루프

Definite Loops

    어떤 집합의 원소들에 대해 반복문을 실행하는 것입니다.

파이썬의 for 문은 좀 독특한 편이다.

ex)
  for i in [5, 4, 3, 2, 1] :
    print(i)
  print('Blastoff!')

변수가 헷갈리지 않도록 반복변수는 단수로 설정하자!
리스트는 복수형 변수로 쓰도록 하자!

for 루프는 while 루프에서라면 개별적인 구문이 했어야 하는 일을
한 번에 하고 있다. 먼저 루프를 몇번 실행할지를 결정한다.

Done? no! -> 실행 -> Done? -> yes! -> 끝

* for루프가 i를 설정(i는 조건에 의해 계속 변한다.)하고 코드를 실행한다.

------------------------------------------------------------------

컴퓨터와 인간의 문제 처리 방식이 다르다는 것은 반복문 이해에 가장 중요한 부분이다.

------------------------------------------------------------

Loop Idioms ? - 루프 관용구. 즉 루프를 설계할 때 사용하는 패턴이다.

루프를 활용해 몇가지 패턴을 알게 되면 우리는 다양한 작업들을 수행할 수 있게 됩니다.

집합을 이용한 루프 (Looping through a Set)

  print('Before')
  for thing in [9, 41, 13, 3, 74, 15] :
    print(thing)
  print('After')

최대수 구하는 패턴

  변수 -1을 설정해놓고
  for in 반복문을 이용하여 집합에 있는 원소들을
  설정한 변수와 크기를 비교하여 크기가 더 크다면
  설정한 변수에 그 집합 원소를 저장하는 방식의 아이디어
  (하지만 리스트가 음수이면 작동하지 않는다.)

루프에서 개수 구하기 (Counting in a Loop)

  리스트에 몇 개의 원소가 있는지를 알고자 할 때 우리는 루프를 사용할 수 있습니다.

  루프를 몇 번 실행했는지 횟수를 구하기 위해서 print() 함수와
  0에서 시작하는 카운팅 변수를 도입하고 루프를 실행할 때 마다 1을 더함

루프에서 총합 구하기 (Summing in a Loop)

  루프에서 만난 값을 모두 더하기 위해, 0에서 시작하는 합계 변수를 도입하고
  루프를 실행할 때 마다 값을 더함

루프를 사용하여 평균 구하기

  총합 변수(count)와 합계 변수(sum)를 설정하고 (두 값은 모두 0으로 시작)
  반복문에서 리스트를 사용하여 count를 1씩 올려주면서
  sum에는 원래 sum과 리스트의 value의 합을 저장한다.
  루프가 끝났으면 sum/count 로 계산해주면 평균 값을 구할 수 있다.

부울값을 사용하여 특정 값을 검색하기. (루프를 사용하여 필터링 하기)

  전역공간에 부울 변수를 선언하고,
  리스트를 반복문과 조건문을 이용하여 값이 같으면 부울 값을 바꿔준다.

  * 특정 값을 찾았을 때 해당 루프를 종료하는 것이 더욱 적절하다.

최소수 구하는 패턴

  최대수가 같은 패턴으로 하기에는 얼마나 큰 수를 설정해야 할지 모르기 때문에
  설정한 변수의 값을 None으로 해준다.
  즉 집합의 첫번째 수를 포착할 수 있는 루프를 설계해야한다.

  None 자료형은 단 하나의 값만 가지는 특별한 표식이다.
  불리언은 True와 False 두 값을 가지고
  정수, 실수는 무한 개의 값을 가지고
  None 자료형은 상수이다. 단 하나의 값을 가진다. 공백을 나타내기 위해 자주 쓰인다.

  루프 전에 루프 블럭 밖의 전역 공간에 smallest = None 을 선언해주면
  이는 곧 루프가 시작되기 전에는 확인한 숫자 중 최솟값은 없다는 뜻을 의미한다.

  이러한 방식은 최댓값을 구할 때도 유용하게 쓰인다.

* 구현한 코드가 다뤄야할 숫자에 따라 좋은 가정이 아닐 수도 있다.

* is 연산자는 == 보다 강력하다.

-----------------------------------------------------

is

  == 연산자보다 강력하다.
  비교대상 두 개의 자료형과 값이 같은지 물어본다.
  변수의 자료형과 값 둘다 동등한지를 물어본다.
  동등하면 true, 아니면 false를 반환한다.
  (불리언 자료형이나 None 자로형에만 사용하도록 하자.)

  * 자바스크립트, PHP에서 === 와 같음.

is not

  역시 연산자이다.
  is not none, is not false 이런식으로 적으면 된다.


Indefinite vs Definite

  불확실한, 불분명한, 불명확한 vs 명확한

------------------------------------------------------

* 인풋 함수는 문자열을 반환한다.
